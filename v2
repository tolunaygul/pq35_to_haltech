#include <mcp_can.h>  // library for MCP2515 ic
#include <SPI.h>      // library for SPI communication

long unsigned int rxId;  // storage for can data
unsigned char len = 0;   // storage for can data
unsigned char rxBuf[8];  // storage for can data

#define CAN0_INT 3  // Set INT to pin 2 for CAN interface 0
#define CAN1_INT 2  // Set INT to pin 3 for CAN interface 1
MCP_CAN CAN0(10);   // set CS pin to 10 for CAN interface 0
MCP_CAN CAN1(9);    // set CS pin to  9 for CAN interface 1


byte out1 = 16;  // rename pin 14 to out1 for LED1
byte out2 = 14;  // rename pin 15 to out2 for LED2
byte out3 = 15;  // rename pin 16 to out3 for LED3
byte out4 = 17;  // rename pin 17 to out4 for LED4




bool park_on = 0; // boolean for keep track of park light on and off

int scaledvalue1 = 0;  // storage for 12 bit analog value
int scaledvalue2 = 0;  // storage for 12 bit analog value
int scaledvalue3 = 0;  // storage for 12 bit analog value
int scaledvalue4 = 0;  // storage for 12 bit analog value


// bools and bytes for wiper and blinker levers
bool blinkl, blinkr, grootp, groot, parkl, parkr, toeter;
bool wiper_pul, wiper_int, wiper_st1, wiper_st2, wiper_rear, wiper_washF, wiper_washR;
byte wiper_stage = 0;
byte wiper_sta   = 0;

// Bool and bytes for the ignition switch 
bool sleutel, klem15, starter;
byte mBSG_byte = 0;
byte mBSG_3    = 0;

// bools for cruise control and steering wheel control buttons
bool cruise_off, cruise_on, cruise_cancel, cruise_plus, cruise_min, tip_down, tip_up;
bool volume_up, volume_down, left, right, call, mute_mic, up, down, page_left, page_right, ok, back;

unsigned long task1Interval    = 50;  // 50ms interval for keep aliv frame
unsigned long task2Interval    = 20;  // 30ms interval for button info frame
unsigned long KAintervalMillis = 0;   // storage for millis counter
unsigned long ledpuls          = 500; // storage for millis counter

unsigned long task1Millis   = 0;      // storage for millis counter
unsigned long task2Millis   = 0;      // storage for millis counter
unsigned long task3Millis   = 0;      // storage for millis counter
unsigned long ledpulsmillis = 0;      // storage for millis counter



void setup() {
  // start serial port an send a message with delay for starting
  Serial.begin(115200);
  Serial.println("Haltech 3x5 keypad ID B emulator");
  delay(50);

  // initialize canbus with 1000kbit and 16mhz xtal
  if (CAN0.begin(MCP_ANY, CAN_100KBPS, MCP_16MHZ) == CAN_OK)
    Serial.println("MCP2515 CAN0 Initialized Successfully!");
  else Serial.println("Error Initializing MCP2515 CAN0...");

    // initialize canbus with 1000kbit and 16mhz xtal
  if (CAN1.begin(MCP_ANY, CAN_1000KBPS, MCP_16MHZ) == CAN_OK)
    Serial.println("MCP2515 CAN1 Initialized Successfully!");
  else Serial.println("Error Initializing MCP2515 CAN1...");

  // Set operation mode to normal so the MCP2515 sends acks to received data.
  CAN0.setMode(MCP_NORMAL);
  CAN1.setMode(MCP_NORMAL);

  pinMode(CAN0_INT, INPUT);      // set INT pin to be an input
  digitalWrite(CAN0_INT, HIGH);  // set INT pin high to enable interna pullup

  pinMode(CAN1_INT, INPUT);      // set INT pin to be an input
  digitalWrite(CAN1_INT, HIGH);  // set INT pin high to enable interna pullup

  pinMode(4, INPUT);
  digitalWrite(4, HIGH);

  pinMode(out1, OUTPUT);
  pinMode(out2, OUTPUT);
  pinMode(out3, OUTPUT);

  Serial.println("All OK");  // all ready to go !
}


void loop() {
  unsigned long currentMillis = millis();  // Get current time in milliseconds

    if (currentMillis - ledpulsmillis >= ledpuls) // interval timer for onboard LED pulsing
      {
        ledpulsmillis = currentMillis;
        ledpulsout();
      }

    if (currentMillis - task1Millis >= task1Interval) 
      {
        task1Millis = currentMillis;
        SendKeepAlive();
      }

    if (currentMillis - task2Millis >= task2Interval) {
    task2Millis = currentMillis;
    SendAnalogValuesIDD();
    SendAnalogValuesIDC();
    SendSpiIDD();
    SendSpiIDC();
    cansend_pq35();
    }

  // read can buffer when interrupted and jump to canread for processing.
  if (!digitalRead(CAN0_INT))  // If CAN0_INT pin is low, read receive buffer
  {
    CAN0.readMsgBuf(&rxId, &len, rxBuf);  // Read data: len = data length, buf = data byte(s)
    digitalWrite(out1, HIGH);
    canRead(); // execute canRead function to negotiate with ecu
    digitalWrite(out1, LOW);
  }
  
    // read can buffer when interrupted and jump to canread for processing.
  if (!digitalRead(CAN1_INT))  // If CAN0_INT pin is low, read receive buffer
  {
    CAN1.readMsgBuf(&rxId, &len, rxBuf);  // Read data: len = data length, buf = data byte(s)
    digitalWrite(out2, HIGH);
    canRead1();
    digitalWrite(out2, HIGH);
  }
}


void SendKeepAlive() {
  byte KeepAlive[8] = { 0X10, 0x01, 0x21, 0x07, 0x00, 0x00, 0x00, 0x00  };
  CAN1.sendMsgBuf(0x6ED, 0, 8, KeepAlive);
  CAN1.sendMsgBuf(0x6E5, 0, 8, KeepAlive);

}

void canRead(){
    if (rxId == 0x2c3)
    {
      sleutel = bitRead(rxBuf[0], 0);
      klem15  = bitRead(rxBuf[0], 1);
      starter = bitRead(rxBuf[0], 3); 
   }

 if (rxId == 0x2c1) 
    {
      blinkl = bitRead(rxBuf[0], 0);
      blinkr = bitRead(rxBuf[0], 1);
      parkl  = bitRead(rxBuf[0], 5);
      parkr  = bitRead(rxBuf[0], 6);
      groot  = bitRead(rxBuf[0], 3);
      grootp = bitRead(rxBuf[0], 2);
      toeter = bitRead(rxBuf[0], 7);

      wiper_pul   = bitRead(rxBuf[1], 0);
      wiper_int   = bitRead(rxBuf[1], 1);
      wiper_st1   = bitRead(rxBuf[1], 2);
      wiper_st2   = bitRead(rxBuf[1], 3);
      wiper_rear  = bitRead(rxBuf[1],6);
      wiper_washF = bitRead(rxBuf[1],4) || bitRead(rxBuf[1],5);
      wiper_washR = bitRead(rxBuf[1],7);

      wiper_stage = (rxBuf[2] & 0x0F  );
        if (wiper_stage ==  1 & wiper_int) {wiper_sta = 1;}
        if (wiper_stage ==  5 & wiper_int) {wiper_sta = 2;}
        if (wiper_stage ==  9 & wiper_int) {wiper_sta = 3;}
        if (wiper_stage == 13 & wiper_int) {wiper_sta = 4;}
        else {
        wiper_sta == 0;
        }
        Serial.println(wiper_sta);
    }
    if (rxId == 0x289)
      {
        cruise_off    = !bitRead(rxBuf[1], 0);
        cruise_on     =  bitRead(rxBuf[1], 0); 
        cruise_cancel =  bitRead(rxBuf[1], 0) && bitRead(rxBuf[1], 1);
        cruise_plus   =  bitRead(rxBuf[1], 3) && bitRead(rxBuf[1], 0);
        cruise_min    =  bitRead(rxBuf[1], 0) && !bitRead(rxBuf[1], 1) && bitRead(rxBuf[1], 2); 
        tip_down      =  bitRead(rxBuf[3], 0);
        tip_up        =  bitRead(rxBuf[3], 1);
      }



    if (rxId == 0x5C1) {
    switch (rxBuf[0]) {
        case 0x06: volume_up = 1; break;
        case 0x07: volume_down = 1; break;
        case 0x03: left = 1; break;
        case 0x02: right = 1; break;
        case 0x1A: call = 1; break;
        case 0x2B: mute_mic = 1; break;
        case 0x22: up = 1; break;
        case 0x23: down = 1; break;
        case 0x09: page_left = 1; break;
        case 0x0A: page_right = 1; break;
        case 0x28: ok = 1; break;
        case 0x29: back = 1; break;
        case 0x00: 
            volume_up = volume_down = left = right = call = mute_mic = 
            up = down = page_left = page_right = ok = back = 0;
            break;
    }
}
    }


void cansend_pq35(){
      byte mBSG_3[4] = { mBSG_byte, 0x00, 0x00, 0x00};
      if (sleutel == 1) {bitSet(mBSG_byte,0);} else {bitClear(mBSG_byte,0);}
      if (klem15  == 1) {bitSet(mBSG_byte,1);} else {bitClear(mBSG_byte,1);}
      CAN0.sendMsgBuf(0x575, 0, 4, mBSG_3);  // send the can message onto the bus


      byte mDimmung[3] = {0x00, 0x00, 0x00};
      if (park_on == 0) {mDimmung[0] = 0, mDimmung[1] = 0;}
      if (park_on == 1) {mDimmung[0] = 100, mDimmung[1] = 100;}
      CAN0.sendMsgBuf(0x635, 0, 3, mDimmung);  // send the can message onto the bus
}

void SendAnalogValuesIDD() {


    // struct the analogue values
  struct m2C1truct {
    unsigned int AVI1_V : 16;  //0:3-1:0
    unsigned int AVI2_V : 16;  //2:3-3:0
    unsigned int AVI3_V : 16;  //4:3-5:0
    unsigned int AVI4_V : 16;  //6:3-7:0
  };

  // union / make a struct
  union union_m2C1 {
    struct m2C1truct data;
    byte bytes[8];
  };

  // construct the can message
  struct canMsg {
    union_m2C1 m2C1;
  } canMsg;

  scaledvalue1 = map(blinkl, 0, 1, 0, 5000);  // read analogue value and scale to 12 bit
  scaledvalue2 = map(blinkr, 0, 1, 0, 5000);  // read analogue value and scale to 12 bit
  scaledvalue3 = map(groot, 0, 1, 0, 5000);  // read analogue value and scale to 12 bit
  scaledvalue4 = map(grootp, 0, 1, 0, 5000);  // read analogue value and scale to 12 bit


  byte HB1 = highByte(scaledvalue1);
  byte LB1 = lowByte(scaledvalue1);
  byte HB2 = highByte(scaledvalue2);
  byte LB2 = lowByte(scaledvalue2);
  byte HB3 = highByte(scaledvalue3);
  byte LB3 = lowByte(scaledvalue3);
  byte HB4 = highByte(scaledvalue4);
  byte LB4 = lowByte(scaledvalue4);


  byte Analog1[8] = { 0x80, blinkl, HB1, LB1, 0x00, 0x00, 0x00, 0x00 };
  byte Analog2[8] = { 0x81, blinkr, HB2, LB2, 0x00, 0x00, 0x00, 0x00 };
  byte Analog3[8] = { 0x82, groot , HB3, LB3, 0x00, 0x00, 0x00, 0x00 };
  byte Analog4[8] = { 0x83, grootp, HB4, LB4, 0x00, 0x00, 0x00, 0x00 };

  CAN1.sendMsgBuf(0x6EB, 0, 8, Analog1);  // send the can message onto the bus
  CAN1.sendMsgBuf(0x6EB, 0, 8, Analog2);  // send the can message onto the bus
  CAN1.sendMsgBuf(0x6EB, 0, 8, Analog3);  // send the can message onto the bus
  CAN1.sendMsgBuf(0x6EB, 0, 8, Analog4);  // send the can message onto the bus
}

void SendSpiIDD() {


  byte Spi1[8] = { 0x60, wiper_pul, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
  byte Spi2[8] = { 0x61, wiper_int, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
  byte Spi3[8] = { 0x62, wiper_st1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
  byte Spi4[8] = { 0x63, wiper_st2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


  CAN1.sendMsgBuf(0x6EB, 0, 8, Spi1);  // send the can message onto the bus
  CAN1.sendMsgBuf(0x6EB, 0, 8, Spi2);  // send the can message onto the bus
  CAN1.sendMsgBuf(0x6EB, 0, 8, Spi3);  // send the can message onto the bus
  CAN1.sendMsgBuf(0x6EB, 0, 8, Spi4);  // send the can message onto the bus

}

void SendAnalogValuesIDC() {


    // struct the analogue values
  struct m2C1truct {
    unsigned int AVI1_V : 16;  //0:3-1:0
    unsigned int AVI2_V : 16;  //2:3-3:0
    unsigned int AVI3_V : 16;  //4:3-5:0
    unsigned int AVI4_V : 16;  //6:3-7:0
  };

  // union / make a struct
  union union_m2C1 {
    struct m2C1truct data;
    byte bytes[8];
  };

  // construct the can message
  struct canMsg {
    union_m2C1 m2C1;
  } canMsg;

  scaledvalue1 = map(cruise_off, 0, 1, 0, 4000);  // read analogue value and scale to 12 bit
  scaledvalue2 = map(cruise_on, 0, 1, 0, 5000);  // read analogue value and scale to 12 bit
  scaledvalue3 = map(cruise_cancel, 0, 1, 0, 5000);  // read analogue value and scale to 12 bit
  scaledvalue4 = map(wiper_sta, 0, 5, 0, 5000);  // read analogue value and scale to 12 bit


  byte HB1 = highByte(scaledvalue1);
  byte LB1 = lowByte(scaledvalue1);
  byte HB2 = highByte(scaledvalue2);
  byte LB2 = lowByte(scaledvalue2);
  byte HB3 = highByte(scaledvalue3);
  byte LB3 = lowByte(scaledvalue3);
  byte HB4 = highByte(scaledvalue4);
  byte LB4 = lowByte(scaledvalue4);


  byte Analog1[8] = { 0x80, cruise_off, HB1, LB1, 0x00, 0x00, 0x00, 0x00 };
  byte Analog2[8] = { 0x81, cruise_on, HB2, LB2, 0x00, 0x00, 0x00, 0x00 };
  byte Analog3[8] = { 0x82, cruise_cancel , HB3, LB3, 0x00, 0x00, 0x00, 0x00 };
  byte Analog4[8] = { 0x83, wiper_sta, HB4, LB4, 0x00, 0x00, 0x00, 0x00 };

  CAN1.sendMsgBuf(0x6E3, 0, 8, Analog1);  // send the can message onto the bus
  CAN1.sendMsgBuf(0x6E3, 0, 8, Analog2);  // send the can message onto the bus
  CAN1.sendMsgBuf(0x6E3, 0, 8, Analog3);  // send the can message onto the bus
  CAN1.sendMsgBuf(0x6E3, 0, 8, Analog4);  // send the can message onto the bus
}

void SendSpiIDC() {


  byte Spi1[8] = { 0x60, wiper_rear, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
  byte Spi2[8] = { 0x61, wiper_washF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
  byte Spi3[8] = { 0x62, wiper_washR, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
  byte Spi4[8] = { 0x63, cruise_min, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };


  CAN1.sendMsgBuf(0x6E3, 0, 8, Spi1);  // send the can message onto the bus
  CAN1.sendMsgBuf(0x6E3, 0, 8, Spi2);  // send the can message onto the bus
  CAN1.sendMsgBuf(0x6E3, 0, 8, Spi3);  // send the can message onto the bus
  CAN1.sendMsgBuf(0x6E3, 0, 8, Spi4);  // send the can message onto the bus

}


void canRead1() {

if (rxId == 0x6F4)
    {
      park_on = bitRead(rxBuf[0], 0);
    }

   
}


void ledpulsout() 
{
    int currentState = digitalRead(out3);
    digitalWrite(out3, !currentState);
}


